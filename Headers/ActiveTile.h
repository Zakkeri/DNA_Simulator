//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : ActiveTile.h
//  @ Date : 5/20/2013
//  @ Author : 
//
//


#ifndef _ACTIVETILE_H
#define _ACTIVETILE_H

#include<QSet>
#include<QList>
#include<QString>
#include<QPair>

using namespace std;

enum coordinate{zero, x, y, _x, _y};	//for tile's sides

typedef struct signal
{

    QString label;
	coordinate Source;
	coordinate Target;
    signal(QString l, coordinate S, coordinate T)	//Signal constructor
		:label(l), Source(S), Target(T)
	{
		if(Target == zero)	//Target can't be zero
		{
            qDebug("Target can't be zero\n");
		}
	}

} Signal;



class ActiveTile
{
public:
    ActiveTile();
	/*
		Default Constructor
		Post-Conditions: New tile object with empty sets of labels and signals was created
	*/

    ActiveTile(QList<QSet<QString> > &ActiveLabels, QList<QSet<QString> >  InactiveLabels, QSet<Signal> &ActivationSignals, QSet<Signal> &TransmissionSignals);
    /*
     Constructor with neighbors being not specified
     Post-Conditions: New tile object with Active labels, Inactive labels, Activation signals, and Transmission signals was created. Neighbor pointers are set to null
     */
    ActiveTile(QList<QSet<QString> > &ActiveLabels, QList<QSet<QString> >  InactiveLabels, QSet<Signal> &ActivationSignals, QSet<Signal> &TransmissionSignals,
               ActiveTile * X, ActiveTile * Y, ActiveTile * _X, ActiveTile * _Y);
	/*
		Constructor with defined tile's parameters.
		Post-Conditions: New tile object with Active labels, Inactive labels, Activation signals, and Transmission signals was created
	*/
	~ActiveTile();
	/*
		Default destcrutor
	*/
    void setCoordinates(QPair<int, int> coord);
	/*
		Post-Conditions: Object's coordinates were changed
	*/
    void setNeighbor(coordinate neigh, ActiveTile * newTile);
	/*
		Post-Conditions: Object neighbor marked by integer neigh is replaced with newTile
	*/
    void AddActiveLabel(coordinate side, QString label);
	/*
		Post-Conditions: New active label is added to a particular side
	*/
    void AddActiveLabels(coordinate side, QString labels[], int n);
	/*
		Post-Conditions: n new active labels are added to a particular side
	*/
    void RemoveActiveLabel(coordinate side, QString label);
	/*
		Post-Conditions: Active label is removed from a side
	*/
    void RemoveActiveLabels(coordinate side, QString labels[], int n);
	/*
		Post-Conditions: n active labels are removed from a side
	*/

    void AddInactiveLabel(coordinate side, QString label);
	/*
		Post-Conditions: New inactive label is added to a particular side
	*/
    void AddInactiveLabels(coordinate side, QString labels[], int n);
	/*
		Post-Conditions: n new inactive labels are added to a particular side
	*/
    void RemoveInactiveLabel(coordinate side, QString label);
	/*
		Post-Conditions: Inactive label is removed from a side
	*/
    void RemoveInactiveLabels(coordinate side, QString labels[], int n);
	/*
		Post-Conditions: n inactive labels are removed from a side
	*/
	void AddActivationSignal(Signal s);
	/*
		Post-Conditions: Activation signal was added
	*/

    void AddActivationSignals(Signal s[], int n);
	/*
		Post-Conditions: n activation signals were added
	*/

	void RemoveActivationSignal(Signal s);
	/*
		Post-Conditions: if s belongs to the tile, it is removed
	*/

	void RemoveActivationSignals(Signal s[], int n);
	/*
		Post-Conditions: for n activation signals, if signal belongs to the tile, it is removed
	*/

	//Similarly for transmission signals
    void AddTransmissionSignal(Signal s);
	void AddTransmissionSignals(Signal s[], int n);
	void RemoveTransmissionSignal(Signal s);
	void RemoveTransmissionSignals(Signal s[], int n);

	int getId();
	/*
		Post-Conditions: Tile's id is returned
	*/
    QSet<QString> getActiveLabels(int side);
	/*
		Post-Conditions: Active labels of a particular side are returned
	*/

    QSet<QString> getInactiveLabels(int side);
	/*
		Post-Conditions: Inactive labels of a particular side are returned
	*/
    QSet<Signal> getActivationSignals();
	/*
		Post-Conditions: Activation signals of a tile are returned
	*/
    QSet<Signal> getTransmissionSignals();
	/*
		Post-Conditions: Transmission signals of a tile are returned
	*/
    QPair<int, int> getCoordinates();
	/*
		Post-Conditions: Tile's coordinates are returned
	*/
	ActiveTile * getNeighbor(coordinate from);
	/*
		Post-Conditions: Tile's neighbor on a particular side is returned; if tile does not have a neighbor, null is returned
	*/

    void RotateTile(QPair<int, int> referencePoint, int times);
	/*
		Post-Conditions: Tile is rotated against reference point required number of times
	*/

    void MoveTile(QPair<int, int> shift);
	/*
		Post-Conditions: Tile is translated according to the shift coordinates
	*/

private:
	static int counter;
	int TileID;
    QList<QSet<QString> > ActiveLabels;
    QList<QSet<QString> > InactiveLabels;
    QSet<Signal> ActivationSignals;
    QSet<Signal> TranmissionSignals;
    QPair<int, int> X_YCoordinates;
    ActiveTile * X;
	ActiveTile * Y;
	ActiveTile * _X;
	ActiveTile * _Y;
};

int ActiveTile::counter = 0;

#endif  //_ACTIVETILE_H
