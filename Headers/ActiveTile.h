//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : ActiveTile.h
//  @ Date : 5/20/2013
//  @ Author : 
//
//


#ifndef _ACTIVETILE_H
#define _ACTIVETILE_H

#include<QSet>
#include<QList>
#include<QPair>

using namespace std;

enum direction{x, y, _x, _y};	//for tile's sides

typedef struct signal
{

    int label;
    direction Target;

    // I'm fairly certain this overload is required for removeOne() to work
    // Post-Conditions:  Returns true iff labels and targets are the same
    bool operator == (const signal otherSignal) const;

    signal(int l, direction T)	//Signal constructor
		:label(l), Target(T){}

} Signal;

typedef struct TileSide
{
    QList<Signal> ActivationSignals;
    QList<Signal> TransmissionSignals;
	QList<int> ActiveLabels;
	QList<int> InactiveLabels;

	// Default Contructor, makes a TileSide with no signals or labels
	// These should be populated later by the ActiveTile they're a part of
	TileSide();

} TileSide;



class ActiveTile
{
public:
	// Default Constructor
    ActiveTile();



	// Constructor with neighbors being not specified
	// Post-Conditions: New tile object with Active labels, Inactive labels, Activation signals, and Transmission signals was created. Neighbor pointers are set to null
    ActiveTile(const QList<QList<int> > &ActiveLabels, const QList<QList<int> > &InactiveLabels,
               const QList<QList<Signal> > &ActivationSignals, const QList<QList<Signal> > &TransmissionSignals);



	// Contructor that makes a deep copy of another tile
	// Post-Conditions: New tile is created that is the same as otherTile
	ActiveTile(const ActiveTile &otherTile);



	// Default Destructor
	~ActiveTile();



	// Post-Conditions: Object's coordinates were changed
    void setCoordinates(QPair<int, int> coord);



	// Post-Conditions: Object neighbor marked by integer neigh is replaced with newTile
    void setNeighbor(direction neigh, ActiveTile * newTile);



    // Post-Conditions: Adds/removes active labels or a list of active labels from a given side
    //
    // Please Note:  Only 1 side may be affected per call of the function,
    //               even if a list is being added/removed
    void AddActiveLabel(direction side, int label);
    void AddActiveLabels(direction side, QList<int> labels);
    void RemoveActiveLabel(direction side, int label);
    void RemoveActiveLabels(direction side, QList<int> labels);



	// Post-Conditions: Adds/removes inactive labels or a list of inactive labels from a given side
    void AddInactiveLabel(direction side, int label);
    void AddInactiveLabels(direction side, QList<int> labels);
    void RemoveInactiveLabel(direction side, int label);
    void RemoveInactiveLabels(direction side, QList<int> labels);



	// Post-Conditions: Adds/removes activation signals or a list of activation signals from a given side
	//                  if the activation signal(s) exist on that side
	//
    // Please Note:  Only 1 side may be affected per call of the function,
    //               even if a list is being added/removed
    void AddActivationSignal(direction side, Signal signal);
    void AddActivationSignals(direction side, QList<Signal> signalList);
    void RemoveActivationSignal(direction side, Signal signal);
    void RemoveActivationSignals(direction side, QList<Signal> signalList);



	// Similarly for transmission signals
    void AddTransmissionSignal(direction side, Signal signal);
    void AddTransmissionSignals(direction side, QList<Signal> signalList);
    void RemoveTransmissionSignal(direction side, Signal signal);
    void RemoveTransmissionSignals(direction side, QList<Signal> signalList);



	// Post-Conditions:  Returns a list of a side's Labels or Signals
    QList<int> getActiveLabels(direction side);
    QList<int> getInactiveLabels(direction side);
    QList<Signal> getActivationSignals(direction side);
    QList<Signal> getTransmissionSignals(direction side);



	// Post-Conditions: Get functions for various properties, they return their appropriate type
	int getId();
    QPair<int, int> getCoordinates();
    ActiveTile * getNeighbor(direction from);



    // Post-Conditions: Tile is rotated counterclockwise required number of times
    void rotateTile(int times);



	// Post-Conditions: Tile is translated according to the shift coordinates
    void moveTile(QPair<int, int> shift);

private:
	static int counter;
	int TileID;
    QPair<int, int> X_Y_Coordinates;
    ActiveTile *Neighbors[4];
	TileSide Side[4];
    QList<Signal> InitiationSignals;
};

int ActiveTile::counter = 0;

#endif  //_ACTIVETILE_H
