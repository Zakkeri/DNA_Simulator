//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : AssemblyTile.h
//  @ Date : 5/20/2013
//  @ Author : 
//
//


#ifndef _ASSEMBLYTILE_H
#define _ASSEMBLYTILE_H
#include<QPair>
#include<QList>
#include<QMap>
#include"../Headers/ActiveTile.h"
#define DEBUG
//#include"../Headers/Simulator.h"
#include"../Headers/AdditionalData.h"

inline QPair<int, int> unrotate(QPair<int, int> coord, int rotation)
{
    switch(rotation)
    {
    case 0: return coord;
    case 1: return QPair<int, int>(coord.second, -coord.first);
    case 2: return QPair<int, int>(-coord.first, -coord.second);
    case 3: return QPair<int, int>(-coord.second, coord.first);
    default:
        return coord;
    }

}

class ActiveTile;

class AssemblyTile
{
public:

#ifdef DEBUG
    static int ID;   //unique id for everytile
#endif
    AssemblyTile(ActiveTile *T, QMap<int, int> &StrengthFunction);
    /*
     Constructor with one tile
     Post-Condition: Assembly tile object that consists of only one tile is created
     */
    AssemblyTile(AssemblyTile &T1, AssemblyTile &T2, QList<boundaryPoint *> *boundary);
    /*
     Constructor with for assembly tile
     Post-Condition: Assembly tile object is created from combination of two assembly tiles
     */

   AssemblyTile(const AssemblyTile &T);
    /*
     Copy-constructor
     */

	~AssemblyTile();
    /*
     Default destructor
     */
    ActiveTile * getTileFromCoordinates(QPair<int, int> coordinate);
    /*
     Post-Condition: Reference to the ActiveTile that is placed on asked coordinate is returned
     */

    void moveAssemblyTile(QPair<int, int> shift);
    /*
     Post-Condition: Whole assembly tile is moved
     */
    void rotateAssemblyTile(QPair<int, int> refPoint, int times);
    /*
     Post-Condition: Assembly tile is rotated required amount of times along reference point
     */

    QList<ActiveTile *> &getListOfActiveTiles();
    /*
     Post-Condition: List of all active tiles is returned
     */

    void addTile(ActiveTile *newTile);
    /*
     Post-Condition: The tile is added to the list of active tiles, map, and the tile count is increased
     */

    int getIndex();
    /*
     Post-Condition: Returns the index of a tile
     */

    void setIndex(int ind);
    /*
     Post-Condition: Sets the index of a tile
     */

    QMap<QPair<int, int>, ActiveTile *> &getMap();
    /*
     Map is returned
     */

    QList<freeActiveLabel> & getListOfFreeSides();
    /*
     Post-Conditions: listOfFreeSides is returned
     */

    bool operator==(const AssemblyTile & other)const;
    /*
     Overloaded equal operator
     */

    QPair<int, int> nominalToMap(QPair<int, int> coordinate) const;
    /*
     Takes a coordinate of the tile and changes it to the spot in the map
     */

    void addFreeSide(freeActiveLabel side);
    /*
     Post-Condition: side is added to the list of free sides
     */
    void rotateToDefaultPosition();

    bool getIsCopy();


private:
    QList<ActiveTile*> ListOfActiveTiles;
    int NumberOfActiveTiles;
    QPair<int, int> tileOffset;
    direction rotation;
    QMap<QPair<int, int>, ActiveTile*> map	;//will map coordinate to tile
    int index;  //in each set tiles will be numbered by index, so we can easily choose first and second tile from the same set
    QList<freeActiveLabel> listOfFreeSides; //will hold a set of all free sides of the whole Assembly tile

    //Current workaround
    bool isCopy;

#ifdef DEBUG
    int uniqueID;   //unique id for everytile
#endif



};

#endif  //_ASSEMBLYTILE_H
