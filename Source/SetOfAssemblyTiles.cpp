//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : SetOfAssemblyTiles.cpp
//  @ Date : 5/20/2013
//  @ Author : 
//
//


#include "../Headers/SetOfAssemblyTiles.h"

SetOfAssemblyTiles::SetOfAssemblyTiles()
/*
 Default Constructor
 */
    :  numberOfAssemblyTiles(0), setID_StepNumber(-1)
{

}

SetOfAssemblyTiles::SetOfAssemblyTiles(AssemblyTile &A)
/*
 Post-Condition: Set of assembly Tiles is created with one assembly tile in it
 */
    :  numberOfAssemblyTiles(1), setID_StepNumber(-1)
{
    listOfAssemblyTiles.append(A);
    A.setIndex(0);
}

SetOfAssemblyTiles::SetOfAssemblyTiles(AssemblyTile A [], int n)

/*
 Post-Condition: Set of assembly Tiles is created with n assembly tiles in it
 */
    : numberOfAssemblyTiles(n), setID_StepNumber(-1)
{
    for(int i = 0; i < n; i++)
    {
        listOfAssemblyTiles.append(A[i]);
        A[i].setIndex(i);
    }
}

SetOfAssemblyTiles::~SetOfAssemblyTiles()
/*
 Default destructor
 */
{

}

void SetOfAssemblyTiles::addAssemblyTile(AssemblyTile &T)
/*
 Post-Condition: If assembly tile is not in the set, then it is added to the set
 */
{
    if(listOfAssemblyTiles.contains(T))
    {
        return;
    }

    if(listOfAssemblyTiles.isEmpty())
    {
        T.setIndex(0);
    }

    else
    {
        T.setIndex(listOfAssemblyTiles.last().getIndex() + 1);
    }

    listOfAssemblyTiles.append(T);
    numberOfAssemblyTiles++;
    return;

}

void SetOfAssemblyTiles::removeAssemblyTile(const AssemblyTile &T)
/*
 Post-Condition: If assembly tile is in the set, then it is removed from the set
 */
{
    if(!listOfAssemblyTiles.contains(T))
    {
        return;
    }
    listOfAssemblyTiles.removeOne(T);
    numberOfAssemblyTiles--;
}

bool SetOfAssemblyTiles::checkIfTileIsInTheSet(const AssemblyTile &T)const
/*
 Post-Condition: If T is in the set, then function returns true, and false otherwise
 */
{
    return listOfAssemblyTiles.contains(T);
}

AssemblyTile & SetOfAssemblyTiles::getAssemblyTile(int index)
/*
 Post-Condition: Return an assembly tile corresponding to the index
 */
{
    return listOfAssemblyTiles[index];
}

QList<AssemblyTile> & SetOfAssemblyTiles::getListOfAssemblyTiles()
/*
 Post-Condition: Returns list of all assembly tiles
 */
{
    return listOfAssemblyTiles;
}
int SetOfAssemblyTiles::getSetId() const
/*
 Post-Condition: Returns the id of current set, which corresponds to the step numberOfAssemblyTiles
 */
{
    return setID_StepNumber;
}

void SetOfAssemblyTiles::setID(int ind)
/*
 Post-Condition: Sets the id of current set, which corresponds to the step numberOfAssemblyTiles
 */
{
    setID_StepNumber = ind;
    return;
}

bool SetOfAssemblyTiles::isEmpty()const
/*
 Post-Condition: If set is empty, returns true, and false otherwise
 */
{
    return listOfAssemblyTiles.isEmpty();
}
bool SetOfAssemblyTiles::operator==(const SetOfAssemblyTiles& other)const
/*
 Overloaded equal operator
 */
{
    if(this->numberOfAssemblyTiles != other.numberOfAssemblyTiles)
    {
        return false;
    }
    for(int i = 0; i < this->numberOfAssemblyTiles; i++)
    {
        if(!(this->listOfAssemblyTiles[i] == other.listOfAssemblyTiles[i]))
        {
            return false;
        }
    }

    return true;
}
