//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : AssemblyTileSetManager.cpp
//  @ Date : 5/20/2013
//  @ Author : 
//
//


#include "../Headers/AssemblyTileSetManager.h"
AssemblyTileSetManager::AssemblyTileSetManager()
/*
 Default constructor
 */
    : numberOfSets(0)
{

}

AssemblyTileSetManager::AssemblyTileSetManager(SetOfAssemblyTiles *S)
/*
 Post-Condition: Assembly tile set manager is created and contains one set of assembly tiles
 */
    : numberOfSets(1)
{
    listOfAssemblyTileSets.append(S);
    S->setID(0);
}

AssemblyTileSetManager::~AssemblyTileSetManager()
/*
 Default destructor
 */
{
    for(QList<SetOfAssemblyTiles*>::iterator next = this->listOfAssemblyTileSets.begin(); next != this->listOfAssemblyTileSets.end(); ++next)
    {
        delete *next;
    }
}

SetOfAssemblyTiles & AssemblyTileSetManager::getAssemblyTileSet(int index)
/*
 Post-Condition: Set that corresponds to index is returned
 */
{
    return *(listOfAssemblyTileSets[index]);
}

void AssemblyTileSetManager::addSet(SetOfAssemblyTiles * newSet)
/*
 Post-Condition: A new set is added to the collection of sets
 */
{
    newSet->setID(numberOfSets);
    numberOfSets++;
    listOfAssemblyTileSets << newSet;
    return;
}

QList<SetOfAssemblyTiles*> & AssemblyTileSetManager::getListOfSets()
/*
 Post-Condition: List of assembly tile sets is returned
 */
{
    return listOfAssemblyTileSets;
}

void AssemblyTileSetManager::deleteSet(SetOfAssemblyTiles * S)
/*
 Post-Condition: If set S is in the collection, it is deleted
 */
{
    for(QList<SetOfAssemblyTiles *>::const_iterator it = this->listOfAssemblyTileSets.begin(); it != this->listOfAssemblyTileSets.end(); ++it)
    {
        if(**it == *S)
        {
            this->listOfAssemblyTileSets.removeOne(S);
            break;
        }
    }


    return;

}

void AssemblyTileSetManager::storeSetOnHardrive(int index) const
/*
 Post-Condition: Set that corresponds to index is stored on the hardrive
 */
{
    return;
}

void AssemblyTileSetManager::loadSetFromHardrive(int index)const
/*
 Post-Condition: Set that corresponds to index is retrived from the hardrive
 */
{
    return;
}
