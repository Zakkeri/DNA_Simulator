//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Simulator.cpp
//  @ Date : 5/20/2013
//  @ Author : 
//
//


#include "Simulator.h"

Simulator::Simulator(SetOfAssemblyTiles S, QMap<QString, int> StrengthMap, int ThetaParameter, int NumberOfSteps)
/*
 Post-Condition: Simulator with initial set of tiles S, strength map, theta parameter, and # of steps is created
 */
{

}

void Simulator::initialize()
/*
 Post-Condition: All initialization goes here
 */
{

}

void Simulator::startSimulation()
/*
 Main function that starts simulation
 */
{

}

SetOfAssemblyTiles & Simulator::createNewSetOfAssemblyTiles()
/*
 Post-Condition: New empty set of assembly tiles is created and returned
 */
{

}

SetOfAssemblyTiles & Simulator::selectNextSetOfAssemblyTiles()
/*
 Post-Condition: Next non-processed set of assembly tiles is picked and returned
 */
{

}

AssemblyTile & Simulator::selectFirstAssemblyTile(SetOfAssemblyTiles & S)
/*
 Post-Condition: First assembly tile from set S is picked
 */
{

}

AssemblyTile & Simulator::selectSecondAssemblyTile(SetOfAssemblyTiles & S)
/*
 Post-Condition: Second assembly tile from set S is picked
 */
{

}

QList<FitPlace> Simulator::findFittingSpots(AssemblyTile &T1,AssemblyTile &T2)
/*
 Post-Condition: All possible fitting places of T1 and T2 are found and put in a list
 */
{

}

AssemblyTile * Simulator::attemptToCombine(AssemblyTile &T1,AssemblyTile &T2, QPair<int, int> first, QPair<int, int> second)
/*
 Post-Condition: T1 and T2 are attempted to be combined at places first and second. If successful, pointer to a new tile is returned.
 If not successful, NULL is returned
 */
{

}

bool Simulator::isDone()
/*
 Post-Condition: Check if simulation is over
 */
{

}

bool Simulator::checkXYOverlap(AssemblyTile & T1, AssemblyTile & T2)
/*
 Post-Condition: Check if T1 and T2 contain an overlap of xy coordinates, i.e. do not fit each other.
 return true, if there is an overlap, and false otherwise
 */
{

}

bool Simulator::checkBondsStrength(AssemblyTile & T1, AssemblyTile & T2)
/*
 Post-Condition: Check if T1 and T2 can be combined satisfying bond strength condition.
 return true if they can, and false if they can't
 */
{

}

void Simulator::TileModificationFunction(AssemblyTile & T)
/*
 Post-Condition: Apply tile modification function to tile T
 */
{

}
