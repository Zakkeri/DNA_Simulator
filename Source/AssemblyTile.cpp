//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : AssemblyTile.cpp
//  @ Date : 5/20/2013
//  @ Author : 
//
//


#include "../Headers/AssemblyTile.h"

AssemblyTile::AssemblyTile(ActiveTile &T)
/*
 Constructor with one tile
 Post-Condition: Assembly tile object that consists of only one tile is created
 */
{


}

AssemblyTile::AssemblyTile(AssemblyTile &T1, AssemblyTile &T2, QList<boundaryPoint *> *boundary)
/*
 Constructor with for assembly tile
 Post-Condition: Assembly tile object is created from combination of two assembly tiles
 */
{

}

AssemblyTile::~AssemblyTile()
/*
 Default destructor
 */
{

}

ActiveTile *AssemblyTile::getTileFromCoordinates(QPair<int, int> coordinate)
/*
 Post-Condition: Reference to the ActiveTile that is placed on asked coordinate is returned
 */
{
    return map[coordinate];
}

void AssemblyTile::moveAssemblyTile(QPair<int, int> shift)
/*
 Post-Condition: Whole assembly tile is moved
 */
{
    ActiveTile currentTile;

    foreach(currentTile, this->ListOfActiveTiles)
    {
        currentTile.moveTile(shift);
    }
}

void AssemblyTile::rotateAssemblyTile(QPair<int, int> refPoint, int times)
/*
 Post-Condition: Assembly tile is rotated required amount of times along reference point
 */
{

}

QList<ActiveTile> & AssemblyTile::getListOfActiveTiles()
/*
 Post-Condition: List of all active tiles is returned
 */
{
    return this->ListOfActiveTiles;
}

int AssemblyTile::getIndex()
/*
 Post-Condition: Returns the index of a tile
 */
{
    return index;
}

void AssemblyTile::setIndex(int ind)
/*
 Post-Condition: Sets the index of a tile
 */
{
    index = ind;
}

//void AssemblyTile::setCurrentNumber(int num)
/*
 Post-Condition: Sets the value of static integer currentNumber to value of num
 */
//{

//}

QList<freeActiveLabel> &AssemblyTile::getListOfFreeSides()
/*
 Post-Conditions: listOfFreeSides is returned
 */
{
    return listOfFreeSides;
}

bool AssemblyTile::operator==(const AssemblyTile & other)const
/*
 Overloaded equal operator
 */
{

}
